视图
初始化路径：
test3/manage.py     # 入口
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test3.settings") --> test3/test3/setting.py

ROOT_URLCONF = 'test3.urls' --> test3/test3/urls.py     # 接着指向
    urlpatterns = [
        url(r'^admin/', include(admin.site.urls)),

        # 第一步：新建urls.py，=2级路由
        url(r'^booktest/',include('booktest.urls'))     # 用户在app里新建urls.py，防止这里的url引用太多
    ]

# 第三步：添加2级路由，其实是匹配
test3/booktest/urls.py
    from django.conf.urls import url                    # 从框架里引用url

    import views

    urlpatterns=[

        # 在bootest/后面匹配空
        url(r'^$',view.index),                          # 调用新引入的views里的index

        # 第六步2：增加匹配路径
        # url(r'^(\b+)$', views.detail),                # 匹配里分组就是取分组里的路径名，通过p1传参
        url(r'^(\d+)$', views.detail),                  # 看看，一字之差

        # 第七步2：设置匹配
        url(r'^(\d+)/(\d+)/(\d+)$', views.detail),
        # 第七步4：灵活匹配
        # 看看，p大小写之差，要认真细致
        # url(r'^(?p<p2>\d+)/(?p<p3>\d+)/(?p<p1>\d+)/$', views.detail),
        url(r'^(?P<p2>\d+)/(?P<p3>\d+)/(?P<p1>\d+)/$', views.detail),
    ]

# 第二步：创建视图
    from django.shortcuts import render

    from django.http import HttpResponse

    def index(request):
        return HttpResponse('Hello world')

# 第六步1：增加视图
    def detail(request, p1):
        return HttpResponse(p1)

# 第七步1：增加视图
    def detail(request, p1, p2, p3):
        return HttpResponse('%s/%s/%s' % (p1, p2, p3))

# 第四步1：python manage.py runserver，开启服务端
# 第四步2：开启浏览器
localhost:8000/booktest/
结果：Hello world

# 第五步：接着开始匹配新的网页，这就要规划了
# 第六步3：浏览器输入
http://127.0.0.1:8000/booktest/abc                             # "^(\b+)$" is not a valid regular expression: nothing to repeat
                                                               # 不是有效的正则表达式: 没有要重复的内容
http://127.0.0.1:8000/booktest/123                             # "^(\b+)$" is not a valid regular expression: nothing to repeat
# 我这里写了数字怎么还报错呢？我把\d写成\b了
结果：123

# 第七步3：浏览器输入
http://127.0.0.1:8000/booktest/2016/12/27/
结果：2016/12/27
# 第七步：匹配多个文件夹路径

# 第八步：开始创建模板
# 第八步1：在项目下创建文件夹templates
# 第八步2：在/test3/test3/setting.py配置
    TEMPLATES = [
        {
            ...

            'DIRS': [os.path.join(BASE_DIR, 'templates')],

            ...
        },
    ]
# 第八步3：创建404模板，404.html
    <body>
    {{ request_path }}
    <h1>傻了吧，啥也没有！</h1>
    </body>

# 第八步4：再配置/test3/test3/setting.py
    DEBUG = False # True    # 关闭错误显示，开发时不能关闭

    ALLOWED_HOSTS = ['*']   # 允许任何用户访问

# 第八步5：
http://127.0.0.1:8000/booktest/20164321434
结果：
/booktest/20164321434
傻了吧，啥也没有！

----------------------------------------------------------------
下面开始学习Request对象：
。。。
GET：一个类似于字典的对象，包含get请求方式所有的参数
。。。

教科案例1：

# 1.设计视图
    # 展示链接的页面
    def getTest1(request):
        return render(request, 'booktest/getTest1.html')

    # 接收一键一值的情况
    def getTest2(request):
        # 根据键接收值
        a1=request.GET['a']     # http://127.0.0.1:8000/booktest/getTest2/?a=1&b=2&c=3
        b1=request.GET['b']
        c1=request.GET['c']
        # 构造上下文
        context={'a': a1, 'b': b1, 'c': c1}
        # 向模板传递上下文，渲染
        return render(request, 'booktest/getTest2.html', context)    # 注意路径booktest/...

    # 接收一键多值的情况
    def getTest3(request):
        # a1=request.GET['a']                                        # 这样只能获取get请求最后一个值
        a1=request.GET.getlist('a')                                  # 获取get请求多个值[u'1', u'2', u'3']
        context={'a': a1}
        return render(request, 'booktest/getTest3.html', context)

# 2.匹配urls
    url(r'^getTest1/$', views.getTest1),
    url(r'^getTest2/$', views.getTest2),
    url(r'^getTest3/$', views.getTest3),

# 3.添加模板
在templates下新增三个模板
getTest1.html
    <body>
    一键一值：<a href="/booktest/getTest2/?a=1&b=2&c=3">test2</a>    # 注意链接路径/booktest/...
    <hr>
    一键多值：<a href="/booktest/getTest3/?a=1&a=2&a=3">test3</a>
    </body>

    # 针对路径赘述一下： 域名/c/a.html，在当前目录下要链接下面的文件
                      域名/b.html --> /b.html，即b.html这个文件和c目录是同级的，所以要带上/
getTest2.html
    <body>
    a:{{ a }}
    <hr>
    b:{{ b }}
    <hr>
    c:{{ c }}

getTest3.html
    <body>
    {{ a }}
    </body>

-------------------------------------------------------------------------
开始POST了：
建议：先关闭CSRF
    MIDDLEWARE_CLASSES
    # 'django.middleware.csrf.CsrfViewMiddleware',

# 1.设计视图
def postTest1(request):
    return render(request, 'booktest/postTest1.html')

def postTest2(request):
    uname=request.POST['uname']
    upwd=request.POST['upwd']
    ugender=request.POST['ugender']
    uhobby=request.POST.getlist('uhobby')
    context={'uname': uname, 'upwd': upwd, 'ugender': ugender, 'uhobby': uhobby}
    return render(request, 'booktest/postTest2.html', context)
# 2.添加路由
    url(r'^postTest1/$', views.postTest1),
    url(r'^postTest2/$', views.postTest2),
# 3.添加模板
booktest/postTest1.html
    <body>
    <form method="post" action="/booktest/postTest2/">
        用户名：<input type="text" name="uname"><br>
        密码：<input type="password" name="upwd"><br>
        性别：<input type="radio" name="ugender" value="男" checked="checked">男
             <input type="radio" name="ugender" value="女">女<br>
        爱好：<input type="checkbox" name="uhobby" value="弟子规">弟子规
             <input type="checkbox" name="uhobby" value="太上感应篇">太上感应篇
             <input type="checkbox" name="uhobby" value="十善业道经">十善业道经<br>
             <input type="submit" value="提交">
    </form>
    </body>

booktest/postTest2.html
    <body>
    用户名：{{ uname }}<br>
    密码：{{ upwd }}<br>
    性别：{{ ugender }}<br>
    爱好：{{ uhobby }}<br>
    {% for hobby in uhobby %}                                       # 遍历
    {{ hobby }}<br>
    {% endfor %}
    </body>

-------------------------------------------------------------------------
Response
# 1.cookie练习，cookie就是浏览器记录登录某个网站后自动存储的一段字符串信息，会提交到服务端，当用户再次登录时
# 服务端会自动把这段信息加载回客户端
# 1-1.设计视图
    def cookieTest(request):
        response=HttpResponse()
        response.set_cookie('t1', 'hello')
        return response

# 1-2.添加路由
    url(r'^cookieTest/$', views.cookieTest),

Response Header
Set-Cookie: t1=hello; Path=/
Request Header
Cookie: csrftoken=7mfDbORRkiUFrUFq8h35aZOM3niBtzRX; sessionid=j2zjxhcppe8u4hiqii3d8d3rsgjlwkxv; t1=abc

# 2.那么服务端是怎么得到cookie呢？
# 2-1.设计视图
    def cookieTest(request):
        response=HttpResponse()
        cookie=request.COOKIES
        if cookie.has_key('t1'):
            response.write(cookie['t1'])
        # response.set_cookie('t1', 'hello cookie')
        return response
# 浏览器第一次提交：
Response Header
Set-Cookie: t1="hello cookie"; Path=/
Request Header
Cookie: csrftoken=7mfDbORRkiUFrUFq8h35aZOM3niBtzRX; sessionid=j2zjxhcppe8u4hiqii3d8d3rsgjlwkxv; t1=hello
# 浏览器第二次提交
Response Header
Set-Cookie: t1="hello cookie"; Path=/
Request Header
Cookie: csrftoken=7mfDbORRkiUFrUFq8h35aZOM3niBtzRX; sessionid=j2zjxhcppe8u4hiqii3d8d3rsgjlwkxv; t1="hello cookie"

# 你在淘宝浏览的商品信息的cookie会在你登录其它网站时推荐出一些相关商品的广告
    <iframe scr="taobao.com/adv.php">

# 3.转向页面练习
先导入模块
    from django.http import HttpResponse, HttpResponseRedirect
# 3-1.设计视图
    def redTest1(resquest):
        return HttpResponseRedirect('/booktest/redTest2/')

    def redTest2(resquest):
        return HttpResponse('这是转向来的页面')

# 3-2.添加路由
    url(r'^redTest1/$', views.redTest1),
    url(r'^redTest2/$', views.redTest2),

------------------------------------------------------------------
session
先配置数据库信息，准备迁移
