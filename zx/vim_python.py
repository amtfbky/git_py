"""
	https://www.zhihu.com/question/19655689
	不按Esc而是按^[或者^c，速度快很多
	学会几个定位键的区别:0, $, {, }, g, G, w, e, b...
	o, O分别是当前位置下面/上面插入一个新行并进入插入状态
	Shift+V选定几行，然后用    一起移动
	Ctrl+V选定行首或行尾的字符，然后用shift+i做插入，或者shift+x做删除
	学会用y,d 和p, P做粘贴剪切
	学会用^W的窗口操作。打开文件用sp或者vs
	学会记录宏的命令。用q加任意键开始录制，再按q保存。然后可用@加这个任意键回放，在@前加数字可定义回放次数。
	"."重复上一个命令，"u"取消上一个命令,"^r"反取消
	^n, ^p用buf里的关键词补全。
	学会搜索替换":%s/要搜的东西/要换成的东西/g"
	任何时候移到一个单词上按#的话可以高亮这个文档里所有一样的单词
	用“/”做搜索, 按n或N 上一个/下一个":!命令 &"可直接运行这个命令，用
	":!命令 %&"如果你想让这个命令对当前所编辑文件做操作。
	任何时候可用":cd %:p:h"来切换目录到当前编辑文件所在目录。

	1. 一键执行

这个不是插件，而是一个自定义的vim配置。很多时候我们写python，都是写一些较为简单的脚本，那么，这个一键执行的功能就非常实用，我个人感觉最实用的是在写单元测试的时候，写完一个单元测试，都不用退出vim，立即执行就能看到结果。

	2. 代码补全(snipMate)代码补全能够显著地减少你敲键的次数，并且将你从琐碎的语法中解放出来。说白了，就是帮你写代码！如果使用snipMate插件，那么，当你输入ifmain以后按tab键，将会自动为你生成下面的代码：    if __name__ == '__main__':
main()
输入for，再按tab键，生成如下代码：    for needle in haystack:
# code...
代码补全有两款插件都比较不错，可以根据自己的需要进行选择：
1.snipMate
2.xptemplate

	3. 语法检查(Syntastic)syntastic是一款强大的语法检查插件，当你保存源文件时，它就会执行，并提示用户哪些代码存在语法错误，哪些代码风格不符合规范，并给出具体的提示。例如，python代码风格默认设置为PEP8,即使你不知道PEP8的风格，只要你使用syntastic插件，并根据它给出的提示修改，那么，你就能写出完全符合PEP8风格的代码！4. 编程提示(jedi-vim)jedi-vim是基于jedi的自动补全插件，与Syntastic 不同的是，该插件更加智能，更贴切的称呼是”编程提示”，而不是代码补全插件。
	可以说，这个插件是写vim的标配，并且，真正让vim写python变成一件轻松愉快的事情。
	注意： 安装惊jedi-vim插件，需要在电脑中安装jedi，根据jedi-vim给出的提示，正常按装即可。不过我之前遇到一个问题，在公司的虚拟机里面，安装以后不起作用，google了半天没有成功，最后更新了一下vim就可以了，希望遇到相同问题的人，能够看到。
	
	5. 调试

至于调试，有pdb和ipdb，难道你们不是用ipdb的吗？如果不是，赶紧用用。


再安利一下我的其他回答（对很多人都很有帮助）：
1.怎么样才算是精通Python？https://www.zhihu.com/question/19794855/answer/129270643
2.哪些Python库让您相见恨晚？https://www.zhihu.com/question/24590883/answer/134253100

"""

